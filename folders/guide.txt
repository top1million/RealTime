Birzeit University - Faculty of Engineering
Electrical & Computer Engineering Department
Real-Time & Embedded Systems course - ENCS4330

Dr. Hanna Bullata
-----------------

Instructions on how to install the source code present in the file
basic.tar.gz
------------------------------------------------------------------

1/ log on your machine using your username and password 

2/ create the directory called "4330" if you haven't done that
already. The command is:

	> mkdir 4330

3/ Put the tarred and zipped file "basic.tar.gz" under the
directory "4330"

4/ execute the following 2 commands

	> gunzip basic.tar.gz
	> tar xvf basic.tar

The following directories will be created:
	args, exec, fork

5/ delete the file basic.tar since it is no more needed.

	> rm basic.tar

Note:
-----
For the unix gurus, the 2 commands in step 4 can be grouped in one
command as follows:
	
	> gzip -dc basic.tar.gz | tar -xvf -

where the command "gzip -dc" is equivalent to "gunzip"

6/ Now that the directories have been created, cd to the directory of
your choice and compile each of the C files as follows:

	> gcc "FileName.c" -o "FileName"

where you replace "FileName.c" by the C-file. If you want to be able
to debug your code using the gdb debugger, compile each of the C files
as follows:

	> gcc -g "FileName.c" -o "FileName"

where the option "-g" will create the symbols table needed by the
debugger.

To start the debugger, execute the following command:

	> gdb "Executable"

Where "Executable" is the executable you are trying to debug.


Under gdb, you can place a breakpoint on line 17 by typing the command 

	(gdb) break 17

To run the program, use the command:

	(gdb) run

To print the value of the variable i, use the command: 

	(gdb) print i

To go to the next line, use the command: 

	(gdb) next


Good Luck.


to follow child in debugging or parent
set follow-fork-mode child
set follow-fork-mode parent

there is a exp5 for lab linux


Dear Students,

Below are some hints on how to debug multi-processing applications:

1. In the children processes C-files, include the following code:

#ifdef _DEBUG_
sleep(60);
#endif

2. Compile your code using the gcc compiler and option -g and define the debugging flag as follows:

> gcc -g -D_DEBUG_ file.c -o file

2. Open as many terminal windows as you have processes to dedug.

3. Run the command sudo gdb without arguments in the terminal windows.

4. Run the parent process under gdb and provide necessary arguments (e.g. run 5 1).

5. In a terminal window, execute the following command:

> ps -ef | grep file

Replace file by the process name you want to debug.

6. In each terminal window where you executed the gdb command, execute the following:

gdb> attach pid

Where pid is the process you want to debug

7. Wait for the processes to wake up from the 60 second sleep period. Once they wake up, they will be suspended.

8. Place breakpoints in the process file you're debugging as follows:

gdb> b child.c:50

In the above command, I am placing a breakpoint at line 50 in the file child.c.

There is also another way to debug a parent and child processes under the same gdb debugger instance:

a. Compile the C-file using the -g option of the gcc but no need to define the _DEBUG_ variable.

b. run the command:

> gdb parent

c. before doing a run under gdb, run the following command under gdb:

> set detach-on-fork off

The above command will hold both processes (parent and child) under the control of gdb. By default, the parent process will be debugged as usual and the child will be held suspended.

c. Under gdb, if you wish to follow the child process, run the following command under gdb:

set follow-fork-mode child
set follow-exec-mode new

The above will make the gdb debugger follow the child process while the parent process is suspended.

d. To quit debugging one of the forked processes, you can either detach from it by executing:

gdb> detach inferiors

Hope the above helps.

Salam,
Hanna.

